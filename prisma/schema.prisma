// Prisma Schema
// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Case {
  id       String @id @default(uuid())
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deprecatedAt    DateTime? // if deprecated, the author no longer believes in their own case
  deprecationNote String? // if deprecated, the author should explain why or link to a replacement case

  versionCount Int    @default(0)
  claim        String // the claim being made by the case. this can never be modified
  caseJson     String

  author           User           @relation(fields: [authorId], references: [id])
  reviews          CaseReview[]
  instances        CaseInstance[]
  conflicts        CaseConflict[] @relation("CaseConflictPrimary")
  inverseConflicts CaseConflict[] @relation("CaseConflictInverse")
}

// The presence of this object indicates that the user agrees with the case
// A user cannot agree to multiple instances of a case, but they can always
// upgrade their agreement to the latest version.
model CaseAgreement {
  caseId      String
  userId      String
  createdAt   DateTime @default(now())
  caseVersion Int      @default(0)
  User        User     @relation(fields: [userId], references: [id])

  @@id([caseId, userId])
}

// The presence of a CaseConflict indicates that the author of the primary case
// believes that their case is incompatible with the conflicting case.
model CaseConflict {
  primaryCaseId     String
  conflictingCaseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  primaryCase     Case @relation("CaseConflictPrimary", fields: [primaryCaseId], references: [id])
  conflictingCase Case @relation("CaseConflictInverse", fields: [conflictingCaseId], references: [id])

  @@id([primaryCaseId, conflictingCaseId])
}

model CaseInstance {
  caseId      String
  caseVersion Int    @default(0)

  createdAt DateTime @default(now())

  caseJson String

  case    Case         @relation(fields: [caseId], references: [id])
  reviews CaseReview[]

  @@id([caseId, caseVersion])
}

// The presence of this review indicates that the user does not
// agree with the case.
// The user should not have a review and an agreement for the same case.
// There can only be one review (or agreement) per user per case instance
model CaseReview {
  id          String @id @default(uuid())
  caseId      String
  caseVersion Int
  authorId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note       String
  reviewJson String

  case         Case         @relation(fields: [caseId], references: [id])
  caseInstance CaseInstance @relation(fields: [caseId, caseVersion], references: [caseId, caseVersion])
  author       User         @relation(fields: [authorId], references: [id])
}

model CaseReviewAgreement {
  caseReviewId String
  userId       String
  createdAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id])

  @@id([caseReviewId, userId])
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  alias      String  @unique
  name       String
  newsletter Boolean @default(false)
  bio        String

  cases            Case[]
  reviews          CaseReview[]
  caseAgreements   CaseAgreement[]
  reviewAgreements CaseReviewAgreement[]
}
