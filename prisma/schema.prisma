// Prisma Schema
// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Case {
  id       String @id @default(uuid())
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  claim    String
  caseJson String

  author    User           @relation(fields: [authorId], references: [id])
  reviews   CaseReview[]
  instances CaseInstance[]
}

// The presence of this object indicates that the user agrees with the case
model CaseAgreement {
  caseId    String
  userId    String
  createdAt DateTime @default(now())
  version   Int      @default(0)

  @@id([caseId, userId])
}

// model CaseConflict

model CaseInstance {
  id     String @id @default(uuid())
  caseId String

  createdAt DateTime @default(now())

  version  Int    @default(0)
  caseJson String

  case    Case         @relation(fields: [caseId], references: [id])
  reviews CaseReview[]
}

// The presence of this review indicates that the user does not
// agree with the case.
// The user should not have a review and an agreement for the same case.
// There can only be one review (or agreement) per user per case instance
model CaseReview {
  id             String @id @default(uuid())
  caseId         String
  caseInstanceId String
  authorId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note       String
  reviewJson String

  case         Case         @relation(fields: [caseId], references: [id])
  caseInstance CaseInstance @relation(fields: [caseInstanceId], references: [id])
  author       User         @relation(fields: [authorId], references: [id])
}

model User {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  name       String
  newsletter Boolean @default(false)

  cases   Case[]
  reviews CaseReview[]
}
